on:
    # Allows you to run this workflow manually from the Actions tab
   workflow_dispatch:
   push:
     branches: [main]
     tags-ignore:
         - '**'
   pull_request:
     branches: [main]
     types: [opened, synchronize, reopened]
jobs:
   build:
     name: Build
     runs-on: ubuntu-latest
     env:
         BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory  
     steps:
       - name: Checkout repo
         uses: actions/checkout@v4
         with:
           fetch-depth: 0  
  
       - name: Set up python
         uses: actions/setup-python@v5.4.0
         with:
           python-version: '3.12'
           architecture: 'x64'
  
       - name: Install PlatformIO
         run: python -m pip install platformio==6.1.11 pip-audit
       
       - name: Build firmwares
         run: FIRMWARE_VERSION=main platformio run 

       - name: Instalar dependencias de PlatformIO
         run: pio pkg install 
       
       - name: Comprobar dependencias desactualizadas
         run: pio pkg outdated
         
       - name: Actualizar setuptools
         run: pip install --upgrade setuptools
  
       - name: Ejecutar Cppcheck en el entorno
         run: cppcheck --enable=all --error-exitcode=0 src/ || true

       - name: Generate compile_commands.json
         run: pio run -t compiledb

       - name: Copiar compile_commands.json al directorio de salida
         run: cp .pio/build/esp32thing/compile_commands.json ${{ env.BUILD_WRAPPER_OUT_DIR }}/
      
       - name: Instalar Build Wrapper
         uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
       
       - name: Compilar Wrapper con PlatformIO
         run: |
           build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} platformio run || true
       
       - name: SonarQube Scan
         uses: SonarSource/sonarqube-scan-action@v5
         env:
           SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
         with:
           args: >
             -Dsonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
           
        
